@page "/"
@inject IJSRuntime jsRuntime;
@inject MetamaskHostProvider _metamaskHostProvider;
@inject NethereumAuthenticator  _nethereumAuthenticator;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Erc20.Blazor;

@if (MetamaskAvailable == true && !string.IsNullOrEmpty(SelectedAccount))
{
    <div class="card m-1">
        <div class="card-body">
            <div class="row">
                <label class="col-sm-3 col-form-label-lg">Selected Account:</label>
                <div class="col-sm-6">
                    @SelectedAccount
                    <small id="selectedAccountHelp" class="form-text text-muted">The selected account is bound to the host (ie Metamask) on change</small>
                </div>
            </div>
        </div>
    </div>

    <div class="card m-1">
        <div class="card-body">
            <div class="row">
                <label class="col-sm-3 col-form-label-lg">Block hash of block number 0:</label>
                <div class="col-sm-6">
                    <button @onclick="@GetBlockHashAsync">Get BlockHash</button>
                    <div>@BlockHash</div>
                    <small id="selectedAccountHelp" class="form-text text-muted">With Metamask calls are redirected to its configured node (i.e http://localhost:8545)</small>
                </div>
            </div>
        </div>
    </div>

    <div class="card m-1">
        <div class="card-body">
            <div class="row">
                <label class="col-sm-3 col-form-label-lg">Authentication by signing:</label>
                <div class="col-sm-6">
                    <button @onclick="@AuthenticateAsync">Authenticate</button>
                    <div>@AuthenticatedAccount</div>
                    <small id="selectedAccountHelp" class="form-text text-muted">Creating an unique challenge per authentication request, allows us to recover and validate what account has signed the message</small>
                </div>
            </div>
        </div>
    </div>


    <Erc20Transfer></Erc20Transfer>
}
else
{
    <div>
        Please connect to Ethereum !
    </div>
}

@code{

    bool MetamaskAvailable { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }
    protected string AuthenticatedAccount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _metamaskHostProvider.SelectedAccountChanged += MetamaskHostProvider_SelectedAccountChanged;
        MetamaskAvailable = await _metamaskHostProvider.CheckProviderAvailabilityAsync();
    }


    private async Task MetamaskHostProvider_SelectedAccountChanged(string account)
    {
        SelectedAccount = account;
        this.StateHasChanged();
    }


    protected async Task GetBlockHashAsync()
    {
        var web3 = await _metamaskHostProvider.GetWeb3Async();
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    protected async Task TransferEtherAsync()
    {
        try
        {
            var web3 = await _metamaskHostProvider.GetWeb3Async();

            TransactionHash = await web3.Eth.GetEtherTransferService().TransferEtherAsync("0x13f022d72158410433cbd66f5dd8bf6d2d129924", 0.001m);
        }
        catch (Exception ex)
        {
            ErrorTransferMessage = ex.Message;
        }
    }

    public async Task AuthenticateAsync()
    {

        AuthenticatedAccount = await _nethereumAuthenticator.RequestNewChallengeSignatureAndRecoverAccountAsync();

    }
}
